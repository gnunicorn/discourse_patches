From 46966494ef57aaadff18a2a135d4604532dd1234 Mon Sep 17 00:00:00 2001
From: Benjamin Kampmann <ben.kampmann@gmail.com>
Date: Fri, 28 Mar 2014 17:47:19 +0100
Subject: [PATCH 1/3] switch archetypes to a capability-driven approach for
 better extensibility

---
 app/models/group.rb                |  2 +-
 app/models/post.rb                 |  2 +-
 app/models/site.rb                 |  2 +-
 app/models/top_topic.rb            |  8 ++--
 app/models/topic.rb                |  7 ++-
 app/models/topic_link.rb           |  4 +-
 app/models/topic_tracking_state.rb |  5 +-
 app/models/user_action.rb          |  2 +-
 lib/archetype.rb                   | 93 ++++++++++++++++++++++++++++++++++----
 lib/topic_creator.rb               | 48 ++++----------------
 10 files changed, 111 insertions(+), 62 deletions(-)

diff --git a/app/models/group.rb b/app/models/group.rb
index 8b920e1..e290a15 100644
--- a/app/models/group.rb
+++ b/app/models/group.rb
@@ -37,7 +37,7 @@ class Group < ActiveRecord::Base
   def posts_for(guardian, before_post_id=nil)
     user_ids = group_users.map {|gu| gu.user_id}
     result = Post.where(user_id: user_ids).includes(:user, :topic).references(:posts, :topics)
-                 .where('topics.archetype <> ?', Archetype.private_message)
+                 .where('topics.archetype IN (?)', Archetype.capable(:shown_publicly))
                  .where(post_type: Post.types[:regular])
 
     unless guardian.is_staff?
diff --git a/app/models/post.rb b/app/models/post.rb
index 50e7b35..8422410 100644
--- a/app/models/post.rb
+++ b/app/models/post.rb
@@ -48,7 +48,7 @@ class Post < ActiveRecord::Base
   scope :by_post_number, -> { order('post_number ASC') }
   scope :with_user, -> { includes(:user) }
   scope :created_since, lambda { |time_ago| where('posts.created_at > ?', time_ago) }
-  scope :public_posts, -> { joins(:topic).where('topics.archetype <> ?', Archetype.private_message) }
+  scope :public_posts, -> { joins(:topic).where('topics.archetype in (?)', Archetype.capable(:shown_publicly)) }
   scope :private_posts, -> { joins(:topic).where('topics.archetype = ?', Archetype.private_message) }
   scope :with_topic_subtype, ->(subtype) { joins(:topic).where('topics.subtype = ?', subtype) }
 
diff --git a/app/models/site.rb b/app/models/site.rb
index 84716f8..3995705 100644
--- a/app/models/site.rb
+++ b/app/models/site.rb
@@ -55,7 +55,7 @@ class Site
   end
 
   def archetypes
-    Archetype.list.reject { |t| t.id == Archetype.private_message }
+    Archetype.capable(:shown_publicly).map { |name| Archetype.get_archetype name }
   end
 
   def self.json_for(guardian)
diff --git a/app/models/top_topic.rb b/app/models/top_topic.rb
index 352677a..c80e2c3 100644
--- a/app/models/top_topic.rb
+++ b/app/models/top_topic.rb
@@ -34,13 +34,13 @@ class TopTopic < ActiveRecord::Base
                 FROM topics
                 WHERE deleted_at IS NOT NULL
                    OR NOT visible
-                   OR archetype = :private_message
+                   OR archetype IN (:non_public_types)
                    OR archived
                    OR id IN (SELECT id FROM category_definition_topic_ids)
               )
               DELETE FROM top_topics
               WHERE topic_id IN (SELECT id FROM invisible_topic_ids)",
-              private_message: Archetype::private_message)
+              non_public_types: Archetype::not_capable(:shown_publicly))
   end
 
   def self.add_new_visible_topics
@@ -52,14 +52,14 @@ class TopTopic < ActiveRecord::Base
               LEFT JOIN top_topics tt ON t.id = tt.topic_id
               WHERE t.deleted_at IS NULL
                 AND t.visible
-                AND t.archetype <> :private_message
+                AND t.archetype IN (:public_types)
                 AND NOT t.archived
                 AND t.id NOT IN (SELECT id FROM category_definition_topic_ids)
                 AND tt.topic_id IS NULL
             )
             INSERT INTO top_topics (topic_id)
             SELECT id FROM visible_topics",
-            private_message: Archetype::private_message)
+            public_types: Archetype.capable(:shown_publicly))
   end
 
   def self.update_posts_count_for(period)
diff --git a/app/models/topic.rb b/app/models/topic.rb
index 7afb405..af0e561 100644
--- a/app/models/topic.rb
+++ b/app/models/topic.rb
@@ -28,6 +28,11 @@ class Topic < ActiveRecord::Base
     2**31 - 1
   end
 
+  def archetype_handle(func, *args, **kwargs)
+    @archetypeObj ||= Archetype.get_archetype(self.archetype)
+    @archetypeObj.__send__ func, *args, **kwargs
+  end
+
   def featured_users
     @featured_users ||= TopicFeaturedUsers.new(self)
   end
@@ -116,7 +121,7 @@ class Topic < ActiveRecord::Base
   # Return private message topics
   scope :private_messages, -> { where(archetype: Archetype.private_message) }
 
-  scope :listable_topics, -> { where('topics.archetype <> ?', [Archetype.private_message]) }
+  scope :listable_topics, -> { where('topics.archetype IN (?)', Archetype.capable(:shown_publicly)) }
 
   scope :by_newest, -> { order('topics.created_at desc, topics.id desc') }
 
diff --git a/app/models/topic_link.rb b/app/models/topic_link.rb
index 8745543..bff6767 100644
--- a/app/models/topic_link.rb
+++ b/app/models/topic_link.rb
@@ -156,7 +156,9 @@ class TopicLink < ActiveRecord::Base
           if topic_id.present?
             topic = Topic.find_by(id: topic_id)
 
-            if topic && post.topic && post.topic.archetype != 'private_message' && topic.archetype != 'private_message'
+            if topic && post.topic &&
+                Archetype.is_capable?(post.topic.archetype, :linkable) &&
+                Archetype.is_capable?(topic.archetype, :linkable)
 
               prefix = Discourse.base_url
 
diff --git a/app/models/topic_tracking_state.rb b/app/models/topic_tracking_state.rb
index 7e51acd..319b269 100644
--- a/app/models/topic_tracking_state.rb
+++ b/app/models/topic_tracking_state.rb
@@ -124,7 +124,7 @@ class TopicTrackingState
     LEFT JOIN topic_users tu ON tu.topic_id = topics.id AND tu.user_id = u.id
     LEFT JOIN categories c ON c.id = topics.category_id
     WHERE u.id IN (:user_ids) AND
-          topics.archetype <> 'private_message' AND
+          topics.archetype IN (:public_archetypes) AND
           ((#{unread}) OR (#{new})) AND
           (topics.visible OR u.admin OR u.moderator) AND
           topics.deleted_at IS NULL AND
@@ -147,7 +147,8 @@ SQL
     sql << " ORDER BY topics.bumped_at DESC LIMIT 500"
 
     SqlBuilder.new(sql)
-      .map_exec(TopicTrackingState, user_ids: user_ids, topic_id: topic_id)
+      .map_exec(TopicTrackingState, user_ids: user_ids, topic_id: topic_id,
+                public_archetypes: Archetype.capable(:shown_publicly))
 
   end
 
diff --git a/app/models/user_action.rb b/app/models/user_action.rb
index b52df90..4cfcbdf 100644
--- a/app/models/user_action.rb
+++ b/app/models/user_action.rb
@@ -300,7 +300,7 @@ SQL
     end
 
     if !guardian.can_see_private_messages?(user_id) || ignore_private_messages
-      builder.where("t.archetype != :archetype", archetype: Archetype::private_message)
+      builder.where("t.archetype IN (:archetypes)", archetypes: Archetype::capable(:shown_publicly))
     end
 
     unless guardian.is_admin?
diff --git a/lib/archetype.rb b/lib/archetype.rb
index caa8cc9..6e7b40d 100644
--- a/lib/archetype.rb
+++ b/lib/archetype.rb
@@ -3,9 +3,9 @@ class Archetype
 
   attr_accessor :id, :options
 
-  def initialize(id, options)
+  def initialize(id, options=nil)
     @id = id
-    @options = options
+    @options = options || {}
   end
 
   def attributes
@@ -17,27 +17,100 @@ class Archetype
     'regular'
   end
 
-  def self.poll
-    'poll'
-  end
-
   def self.private_message
     'private_message'
   end
 
+  def self.capable(cap)
+    @capabilities[cap] || []
+  end
+
+  def self.not_capable(cap)
+    are_capable = capable(cap)
+    self.list.reject { |arch| are_capable.include? arch }
+  end
+
+  def self.is_capable?(name, cap)
+    return capable(cap).include? name
+  end
+
   def self.list
     return [] unless @archetypes.present?
     @archetypes.values
   end
 
+  def self.get_archetype(name)
+    @archetypes[name]
+  end
+
+  def self.register_capability(capability, name)
+    @capabilities ||= {}
+    @capabilities[capability] = [] unless @capabilities.has_key? capability
+    @capabilities[capability] << name unless @capabilities[capability].include? name
+  end
+
   def self.register(name, options={})
     @archetypes ||= {}
-    @archetypes[name] = Archetype.new(name, options)
+    archetype = options[:archetype] || Archetype.new(name, options)
+    @archetypes[name] = archetype
+    if archetype.options.has_key? :capabilities
+      archetype.options[:capabilities].each do |cap|
+        puts cap, name
+        register_capability(cap, name)
+      end
+    end
   end
 
+  def handle_topic_creation(topic_creator)
+    self
+  end
 
-  # By default we have a regular archetype and a private message
-  register 'regular'
-  register 'private_message'
+  # By default we have a regular archetype
+  register 'regular', capabilities: [:searchable, :shown_publicly, :linkable]
 
 end
+
+# and a private message
+class PrivateMessageArchetype < Archetype
+
+  def handle_topic_creation(topic_creator)
+    topic_creator.topic.subtype = TopicSubtype.user_to_user unless topic_creator.topic.subtype
+
+    unless topic_creator.opts[:target_usernames].present? || topic_creator.opts[:target_group_names].present?
+      topic_creator.topic.errors.add(:archetype, :cant_send_pm)
+      topic_creator.errors = topic_creator.topic.errors
+      raise ActiveRecord::Rollback.new
+    end
+
+    add_users(topic_creator.topic, topic_creator.opts[:target_usernames])
+    add_groups(topic_creator.topic, topic_creator.opts[:target_group_names])
+    topic_creator.topic.topic_allowed_users.build(user_id: topic_creator.user.id)
+  end
+
+  private
+    def add_users(topic_creator, usernames)
+      return unless usernames
+      User.where(username: usernames.split(',')).each do |user|
+        check_can_send_permission!(topic_creator, user)
+        topic_creator.topic.topic_allowed_users.build(user_id: user.id)
+      end
+    end
+
+    def add_groups(topic_creator, groups)
+      return unless groups
+      Group.where(name: groups.split(',')).each do |group|
+        check_can_send_permission!(topic_creator, group)
+        topic_creator.topic.topic_allowed_groups.build(group_id: group.id)
+      end
+    end
+
+    def check_can_send_permission!(topic_creator, item)
+      unless topic_creator.guardian.can_send_private_message?(item)
+        topic_creator.topic.errors.add(:archetype, :cant_send_pm)
+        topic_creator.errors = topic_creator.topic.errors
+        raise ActiveRecord::Rollback.new
+      end
+    end
+end
+
+Archetype.register("private_message", {archetype: PrivateMessageArchetype.new("private_message")})
diff --git a/lib/topic_creator.rb b/lib/topic_creator.rb
index b361bbc..9112050 100644
--- a/lib/topic_creator.rb
+++ b/lib/topic_creator.rb
@@ -16,7 +16,7 @@ class TopicCreator
     @topic = Topic.new(setup_topic_params)
 
     setup_auto_close_time
-    process_private_message
+    handle_archetype
     save_topic
     watch_topic
     auto_mute_topic
@@ -42,6 +42,13 @@ class TopicCreator
     CategoryUser.auto_watch_new_topic(@topic)
   end
 
+  def handle_archetype
+    archetype = Archetype.get_archetype(@topic.archetype)
+    if archetype
+      archetype.handle_topic_creation(self)
+    end
+  end
+
   def setup_topic_params
     topic_params = {
       title: @opts[:title],
@@ -84,49 +91,10 @@ class TopicCreator
     @topic.set_auto_close(@opts[:auto_close_time], @user)
   end
 
-  def process_private_message
-    return unless @opts[:archetype] == Archetype.private_message
-    @topic.subtype = TopicSubtype.user_to_user unless @topic.subtype
-
-    unless @opts[:target_usernames].present? || @opts[:target_group_names].present?
-      @topic.errors.add(:archetype, :cant_send_pm)
-      @errors = @topic.errors
-      raise ActiveRecord::Rollback.new
-    end
-
-    add_users(@topic,@opts[:target_usernames])
-    add_groups(@topic,@opts[:target_group_names])
-    @topic.topic_allowed_users.build(user_id: @user.id)
-  end
-
   def save_topic
     unless @topic.save(validate: !@opts[:skip_validations])
       @errors = @topic.errors
       raise ActiveRecord::Rollback.new
     end
   end
-
-  def add_users(topic, usernames)
-    return unless usernames
-    User.where(username: usernames.split(',')).each do |user|
-      check_can_send_permission!(topic,user)
-      topic.topic_allowed_users.build(user_id: user.id)
-    end
-  end
-
-  def add_groups(topic, groups)
-    return unless groups
-    Group.where(name: groups.split(',')).each do |group|
-      check_can_send_permission!(topic,group)
-      topic.topic_allowed_groups.build(group_id: group.id)
-    end
-  end
-
-  def check_can_send_permission!(topic,item)
-    unless @guardian.can_send_private_message?(item)
-      topic.errors.add(:archetype, :cant_send_pm)
-      @errors = topic.errors
-      raise ActiveRecord::Rollback.new
-    end
-  end
 end
-- 
1.8.3.4 (Apple Git-47)

