From bc25fe43097db74d783bedb0d524b3d749c76506 Mon Sep 17 00:00:00 2001
From: Benjamin Kampmann <ben.kampmann@gmail.com>
Date: Fri, 28 Mar 2014 17:47:19 +0100
Subject: [PATCH 1/8] switch archetypes to a capability-driven approach for
 better extensibility

---
 app/models/group.rb                |  2 +-
 app/models/site.rb                 |  2 +-
 app/models/top_topic.rb            |  8 ++++----
 app/models/topic.rb                |  2 +-
 app/models/topic_link.rb           |  4 +++-
 app/models/topic_tracking_state.rb |  5 +++--
 app/models/user_action.rb          |  2 +-
 lib/archetype.rb                   | 33 +++++++++++++++++++++++++++------
 8 files changed, 41 insertions(+), 17 deletions(-)

diff --git a/app/models/group.rb b/app/models/group.rb
index 8b920e1..e290a15 100644
--- a/app/models/group.rb
+++ b/app/models/group.rb
@@ -37,7 +37,7 @@ class Group < ActiveRecord::Base
   def posts_for(guardian, before_post_id=nil)
     user_ids = group_users.map {|gu| gu.user_id}
     result = Post.where(user_id: user_ids).includes(:user, :topic).references(:posts, :topics)
-                 .where('topics.archetype <> ?', Archetype.private_message)
+                 .where('topics.archetype IN (?)', Archetype.capable(:shown_publicly))
                  .where(post_type: Post.types[:regular])
 
     unless guardian.is_staff?
diff --git a/app/models/site.rb b/app/models/site.rb
index 84716f8..88d5f5a 100644
--- a/app/models/site.rb
+++ b/app/models/site.rb
@@ -55,7 +55,7 @@ class Site
   end
 
   def archetypes
-    Archetype.list.reject { |t| t.id == Archetype.private_message }
+    Archetype.capable :publicly_shown
   end
 
   def self.json_for(guardian)
diff --git a/app/models/top_topic.rb b/app/models/top_topic.rb
index 352677a..c80e2c3 100644
--- a/app/models/top_topic.rb
+++ b/app/models/top_topic.rb
@@ -34,13 +34,13 @@ class TopTopic < ActiveRecord::Base
                 FROM topics
                 WHERE deleted_at IS NOT NULL
                    OR NOT visible
-                   OR archetype = :private_message
+                   OR archetype IN (:non_public_types)
                    OR archived
                    OR id IN (SELECT id FROM category_definition_topic_ids)
               )
               DELETE FROM top_topics
               WHERE topic_id IN (SELECT id FROM invisible_topic_ids)",
-              private_message: Archetype::private_message)
+              non_public_types: Archetype::not_capable(:shown_publicly))
   end
 
   def self.add_new_visible_topics
@@ -52,14 +52,14 @@ class TopTopic < ActiveRecord::Base
               LEFT JOIN top_topics tt ON t.id = tt.topic_id
               WHERE t.deleted_at IS NULL
                 AND t.visible
-                AND t.archetype <> :private_message
+                AND t.archetype IN (:public_types)
                 AND NOT t.archived
                 AND t.id NOT IN (SELECT id FROM category_definition_topic_ids)
                 AND tt.topic_id IS NULL
             )
             INSERT INTO top_topics (topic_id)
             SELECT id FROM visible_topics",
-            private_message: Archetype::private_message)
+            public_types: Archetype.capable(:shown_publicly))
   end
 
   def self.update_posts_count_for(period)
diff --git a/app/models/topic.rb b/app/models/topic.rb
index 7afb405..e620d3f 100644
--- a/app/models/topic.rb
+++ b/app/models/topic.rb
@@ -116,7 +116,7 @@ class Topic < ActiveRecord::Base
   # Return private message topics
   scope :private_messages, -> { where(archetype: Archetype.private_message) }
 
-  scope :listable_topics, -> { where('topics.archetype <> ?', [Archetype.private_message]) }
+  scope :listable_topics, -> { where('topics.archetype IN (?)', Archetype.capable(:shown_publicly)) }
 
   scope :by_newest, -> { order('topics.created_at desc, topics.id desc') }
 
diff --git a/app/models/topic_link.rb b/app/models/topic_link.rb
index 8745543..bff6767 100644
--- a/app/models/topic_link.rb
+++ b/app/models/topic_link.rb
@@ -156,7 +156,9 @@ class TopicLink < ActiveRecord::Base
           if topic_id.present?
             topic = Topic.find_by(id: topic_id)
 
-            if topic && post.topic && post.topic.archetype != 'private_message' && topic.archetype != 'private_message'
+            if topic && post.topic &&
+                Archetype.is_capable?(post.topic.archetype, :linkable) &&
+                Archetype.is_capable?(topic.archetype, :linkable)
 
               prefix = Discourse.base_url
 
diff --git a/app/models/topic_tracking_state.rb b/app/models/topic_tracking_state.rb
index 7e51acd..319b269 100644
--- a/app/models/topic_tracking_state.rb
+++ b/app/models/topic_tracking_state.rb
@@ -124,7 +124,7 @@ class TopicTrackingState
     LEFT JOIN topic_users tu ON tu.topic_id = topics.id AND tu.user_id = u.id
     LEFT JOIN categories c ON c.id = topics.category_id
     WHERE u.id IN (:user_ids) AND
-          topics.archetype <> 'private_message' AND
+          topics.archetype IN (:public_archetypes) AND
           ((#{unread}) OR (#{new})) AND
           (topics.visible OR u.admin OR u.moderator) AND
           topics.deleted_at IS NULL AND
@@ -147,7 +147,8 @@ SQL
     sql << " ORDER BY topics.bumped_at DESC LIMIT 500"
 
     SqlBuilder.new(sql)
-      .map_exec(TopicTrackingState, user_ids: user_ids, topic_id: topic_id)
+      .map_exec(TopicTrackingState, user_ids: user_ids, topic_id: topic_id,
+                public_archetypes: Archetype.capable(:shown_publicly))
 
   end
 
diff --git a/app/models/user_action.rb b/app/models/user_action.rb
index b52df90..4cfcbdf 100644
--- a/app/models/user_action.rb
+++ b/app/models/user_action.rb
@@ -300,7 +300,7 @@ SQL
     end
 
     if !guardian.can_see_private_messages?(user_id) || ignore_private_messages
-      builder.where("t.archetype != :archetype", archetype: Archetype::private_message)
+      builder.where("t.archetype IN (:archetypes)", archetypes: Archetype::capable(:shown_publicly))
     end
 
     unless guardian.is_admin?
diff --git a/lib/archetype.rb b/lib/archetype.rb
index caa8cc9..6692fa0 100644
--- a/lib/archetype.rb
+++ b/lib/archetype.rb
@@ -17,27 +17,48 @@ class Archetype
     'regular'
   end
 
-  def self.poll
-    'poll'
-  end
-
   def self.private_message
     'private_message'
   end
 
+  def self.capable(cap)
+    @capabilities[cap] || []
+  end
+
+  def self.not_capable(cap)
+    are_capable = capable(cap)
+    self.list.reject { |arch| are_capable.include? arch }
+  end
+
+  def self.is_capable?(name, cap)
+    return capable(cap).include? name
+  end
+
   def self.list
     return [] unless @archetypes.present?
     @archetypes.values
   end
 
+  def self.register_capability(capability, name)
+    @capabilities ||= {}
+    @capabilities[capability] = [] unless @capabilities.has_key? capability
+    @capabilities[capability] << name unless @capabilities[capability].include? name
+  end
+
   def self.register(name, options={})
     @archetypes ||= {}
-    @archetypes[name] = Archetype.new(name, options)
+    archetype = options["archetype"] || Archetype.new(name, options)
+    @archetypes[name] = archetype
+    if options.has_key? :capabilties
+      options[:capabilties].each do |cap|
+        register_capability(cap, name)
+      end
+    end
   end
 
 
   # By default we have a regular archetype and a private message
-  register 'regular'
+  register 'regular', capabilties: [:searchable, :shown_publicly, :linkable]
   register 'private_message'
 
 end
-- 
1.8.3.4 (Apple Git-47)

