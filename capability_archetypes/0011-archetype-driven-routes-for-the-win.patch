From fa4f9a6c3a7c9e2d2da71f47294885be6fab0203 Mon Sep 17 00:00:00 2001
From: Benjamin Kampmann <ben.kampmann@gmail.com>
Date: Fri, 16 May 2014 15:45:57 +0200
Subject: [PATCH 11/18] archetype driven routes for the win

---
 .../initializers/archetype_routes_init.js          | 34 +++++++++++
 .../discourse/routes/application_routes.js         | 11 +++-
 config/routes.rb                                   | 66 +++++++++++++---------
 3 files changed, 82 insertions(+), 29 deletions(-)
 create mode 100644 app/assets/javascripts/discourse/initializers/archetype_routes_init.js

diff --git a/app/assets/javascripts/discourse/initializers/archetype_routes_init.js b/app/assets/javascripts/discourse/initializers/archetype_routes_init.js
new file mode 100644
index 0000000..8bcaeaa
--- /dev/null
+++ b/app/assets/javascripts/discourse/initializers/archetype_routes_init.js
@@ -0,0 +1,34 @@
+/**
+  Updates the relative ages of dates on the screen.
+
+**/
+Discourse.addInitializer(function() {
+
+  var discoveryRoutes = [],
+      discoveryTemplates = [];
+
+  for (var name in Discourse) {
+    if (name.indexOf("Discovery") === 0) discoveryRoutes.push(name.slice(9));
+  }
+
+  for (var name in Ember.TEMPLATES) {
+    if (name.indexOf("discovery") === 0) discoveryTemplates.push(name.slice(9));
+  }
+
+  Discourse.Site.currentProp('archetypes').forEach(function(arch){
+    discoveryRoutes.forEach(function(route){
+      var router = Discourse["Discovery" + route];
+      if (route === ""){
+        // for main, we want it to set the other filter to our 
+        // archetype
+        router = router.extend({
+            filter: {"archetype": arch.id}
+        });
+      }
+      Discourse['Arch' + arch.id + route] = router;
+    });
+    discoveryTemplates.forEach(function(tmpl){
+        Ember.TEMPLATES['arch' + arch.id + tmpl] = Ember.TEMPLATES["discovery" + tmpl];
+    });
+  });
+});
\ No newline at end of file
diff --git a/app/assets/javascripts/discourse/routes/application_routes.js b/app/assets/javascripts/discourse/routes/application_routes.js
index 461cd2a..b662cc6 100644
--- a/app/assets/javascripts/discourse/routes/application_routes.js
+++ b/app/assets/javascripts/discourse/routes/application_routes.js
@@ -19,8 +19,8 @@ Discourse.Route.buildRoutes(function() {
     this.route('fromParamsNear', { path: '/:nearPost' });
   });
 
-  this.resource('discovery', { path: '/' }, function() {
-    router = this;
+  function discoverer() {
+    var router = this;
 
     // top
     this.route('top');
@@ -54,6 +54,13 @@ Discourse.Route.buildRoutes(function() {
 
     // homepage
     this.route(Discourse.Utilities.defaultHomepage(), { path: '/' });
+  }
+
+  this.resource('discovery', { path: '/' }, discoverer);
+
+  Discourse.Site.currentProp('archetypes').forEach(function(arch){
+    // once we i18n strings, use them
+    router.resource('arch' + arch.id, {path: '/' + arch.slug}, discoverer);
   });
 
   this.resource('group', { path: '/groups/:name' }, function() {
diff --git a/config/routes.rb b/config/routes.rb
index 98e0541..0fb0f47 100644
--- a/config/routes.rb
+++ b/config/routes.rb
@@ -264,36 +264,48 @@ Discourse::Application.routes.draw do
   # We've renamed popular to latest. If people access it we want a permanent redirect.
   get "popular" => "list#popular_redirect"
 
-  resources :categories, :except => :show
-  get "category/:id/show" => "categories#show"
-  post "category/:category_id/move" => "categories#move"
-  get "category/:category.rss" => "list#category_feed", format: :rss
-  get "category/:parent_category/:category.rss" => "list#category_feed", format: :rss
-  get "category/:category" => "list#category_latest"
-  get "category/:category/none" => "list#category_none_latest"
-  get "category/:parent_category/:category" => "list#parent_category_category_latest"
-
-  get "top" => "list#top"
-  get "category/:category/l/top" => "list#category_top", as: "category_top"
-  get "category/:category/none/l/top" => "list#category_none_top", as: "category_none_top"
-  get "category/:parent_category/:category/l/top" => "list#parent_category_category_top", as: "parent_category_category_top"
-
-  TopTopic.periods.each do |period|
-    get "top/#{period}" => "list#top_#{period}"
-    get "category/:category/l/top/#{period}" => "list#category_top_#{period}", as: "category_top_#{period}"
-    get "category/:category/none/l/top/#{period}" => "list#category_none_top_#{period}", as: "category_none_top_#{period}"
-    get "category/:parent_category/:category/l/top/#{period}" => "list#parent_category_category_top_#{period}", as: "parent_category_category_top_#{period}"
-  end
+  def categorizer(suffix)
+    resources :categories, :except => :show
+    get "category/:id/show" => "categories#show"
+    post "category/:category_id/move" => "categories#move"
+    get "category/:category.rss" => "list#category_feed", format: :rss
+    get "category/:parent_category/:category.rss" => "list#category_feed", format: :rss
+    get "category/:category" => "list#category_latest"
+    get "category/:category/none" => "list#category_none_latest"
+    get "category/:parent_category/:category" => "list#parent_category_category_latest"
+
+    get "top" => "list#top"
+    get "category/:category/l/top" => "list#category_top", as: "category_top#{suffix}"
+    get "category/:category/none/l/top" => "list#category_none_top", as: "category_none_top#{suffix}"
+    get "category/:parent_category/:category/l/top" => "list#parent_category_category_top", as: "parent_category_category_top#{suffix}"
+
+    TopTopic.periods.each do |period|
+      get "top/#{period}" => "list#top_#{period}"
+      get "category/:category/l/top/#{period}" => "list#category_top_#{period}", as: "category_top_#{period}#{suffix}"
+      get "category/:category/none/l/top/#{period}" => "list#category_none_top_#{period}", as: "category_none_top_#{period}#{suffix}"
+      get "category/:parent_category/:category/l/top/#{period}" => "list#parent_category_category_top_#{period}", as: "parent_category_category_top_#{period}#{suffix}"
+    end
+
+    Discourse.anonymous_filters.each do |filter|
+      get "#{filter}.rss" => "list##{filter}_feed", format: :rss
+    end
 
-  Discourse.anonymous_filters.each do |filter|
-    get "#{filter}.rss" => "list##{filter}_feed", format: :rss
+    Discourse.filters.each do |filter|
+      get "#{filter}" => "list##{filter}"
+      get "category/:category/l/#{filter}" => "list#category_#{filter}", as: "category_#{filter}#{suffix}"
+      get "category/:category/none/l/#{filter}" => "list#category_none_#{filter}", as: "category_none_#{filter}#{suffix}"
+      get "category/:parent_category/:category/l/#{filter}" => "list#parent_category_category_#{filter}", as: "parent_category_category_#{filter}#{suffix}"
+    end
   end
 
-  Discourse.filters.each do |filter|
-    get "#{filter}" => "list##{filter}"
-    get "category/:category/l/#{filter}" => "list#category_#{filter}", as: "category_#{filter}"
-    get "category/:category/none/l/#{filter}" => "list#category_none_#{filter}", as: "category_none_#{filter}"
-    get "category/:parent_category/:category/l/#{filter}" => "list#parent_category_category_#{filter}", as: "parent_category_category_#{filter}"
+  categorizer ""
+
+  Archetype.capable(:shown_publicly).each do |id|
+    name = I18n.t("archetypes.#{id}.slug")
+    name = id if name.start_with?("translation missing:")
+    scope "/#{name}" do
+      categorizer(name)
+    end
   end
 
   get "search" => "search#query"
-- 
1.8.3.4 (Apple Git-47)

