From 692e88312d5c2651a8a9ace885561cb5f8b7e12e Mon Sep 17 00:00:00 2001
From: Benjamin Kampmann <ben.kampmann@gmail.com>
Date: Mon, 31 Mar 2014 11:41:51 +0200
Subject: [PATCH 3/8] move PM archetype specifics into its archetype info

---
 lib/archetype.rb     | 52 +++++++++++++++++++++++++++++++++++++++++++++++++---
 lib/topic_creator.rb | 48 ++++++++----------------------------------------
 2 files changed, 57 insertions(+), 43 deletions(-)

diff --git a/lib/archetype.rb b/lib/archetype.rb
index 6d397c7..10fc266 100644
--- a/lib/archetype.rb
+++ b/lib/archetype.rb
@@ -13,6 +13,9 @@ class Archetype
      'options' => @options}
   end
 
+  def handle_topic_creation(topic_creator)
+  end
+
   def self.default
     'regular'
   end
@@ -60,9 +63,52 @@ class Archetype
     end
   end
 
-
-  # By default we have a regular archetype and a private message
+  # By default we have a regular archetype
   register 'regular', capabilties: [:searchable, :shown_publicly, :linkable]
-  register 'private_message'
 
 end
+
+# and a private message
+class PrivateMessageArchetype < Archetype
+
+  def handle_topic_creation(topic_creator)
+    topic_creator.topic.subtype = TopicSubtype.user_to_user unless topic_creator.topic.subtype
+
+    unless topic_creator.opts[:target_usernames].present? || topic_creator.opts[:target_group_names].present?
+      topic_creator.topic.errors.add(:archetype, :cant_send_pm)
+      topic_creator.errors = topic_creator.topic.errors
+      raise ActiveRecord::Rollback.new
+    end
+
+    add_users(topic_creator.topic, topic_creator.opts[:target_usernames])
+    add_groups(topic_creator.topic, topic_creator.opts[:target_group_names])
+    topic_creator.topic.topic_allowed_users.build(user_id: topic_creator.user.id)
+  end
+
+  private
+    def add_users(topic_creator, usernames)
+      return unless usernames
+      User.where(username: usernames.split(',')).each do |user|
+        check_can_send_permission!(topic_creator, user)
+        topic_creator.topic.topic_allowed_users.build(user_id: user.id)
+      end
+    end
+
+    def add_groups(topic_creator, groups)
+      return unless groups
+      Group.where(name: groups.split(',')).each do |group|
+        check_can_send_permission!(topic_creator, group)
+        topic_creator.topic.topic_allowed_groups.build(group_id: group.id)
+      end
+    end
+
+    def check_can_send_permission!(topic_creator, item)
+      unless topic_creator.guardian.can_send_private_message?(item)
+        topic_creator.topic.errors.add(:archetype, :cant_send_pm)
+        topic_creator.errors = topic_creator.topic.errors
+        raise ActiveRecord::Rollback.new
+      end
+    end
+end
+
+Archetype.register("private_message", {archetype: PrivateMessageArchetype.new("private_message")})
diff --git a/lib/topic_creator.rb b/lib/topic_creator.rb
index 7356c8b..c241672 100644
--- a/lib/topic_creator.rb
+++ b/lib/topic_creator.rb
@@ -16,7 +16,7 @@ class TopicCreator
     @topic = Topic.new(setup_topic_params)
 
     setup_auto_close_time
-    process_private_message
+    handle_archetype
     save_topic
     watch_topic
     auto_mute_topic
@@ -42,6 +42,13 @@ class TopicCreator
     CategoryUser.auto_watch_new_topic(@topic)
   end
 
+  def handle_archetype
+    archetype = Archetype.get_archetype(@topic.archetype)
+    if archetype
+      archetype.handle_topic_creation(self)
+    end
+  end
+
   def setup_topic_params
     topic_params = {
       title: @opts[:title],
@@ -84,49 +91,10 @@ class TopicCreator
     @topic.set_auto_close(@opts[:auto_close_time], @user)
   end
 
-  def process_private_message
-    return unless @opts[:archetype] == Archetype.private_message
-    @topic.subtype = TopicSubtype.user_to_user unless @topic.subtype
-
-    unless @opts[:target_usernames].present? || @opts[:target_group_names].present?
-      @topic.errors.add(:archetype, :cant_send_pm)
-      @errors = @topic.errors
-      raise ActiveRecord::Rollback.new
-    end
-
-    add_users(@topic,@opts[:target_usernames])
-    add_groups(@topic,@opts[:target_group_names])
-    @topic.topic_allowed_users.build(user_id: @user.id)
-  end
-
   def save_topic
     unless @topic.save(validate: !@opts[:skip_validations])
       @errors = @topic.errors
       raise ActiveRecord::Rollback.new
     end
   end
-
-  def add_users(topic, usernames)
-    return unless usernames
-    User.where(username: usernames.split(',')).each do |user|
-      check_can_send_permission!(topic,user)
-      topic.topic_allowed_users.build(user_id: user.id)
-    end
-  end
-
-  def add_groups(topic, groups)
-    return unless groups
-    Group.where(name: groups.split(',')).each do |group|
-      check_can_send_permission!(topic,group)
-      topic.topic_allowed_groups.build(group_id: group.id)
-    end
-  end
-
-  def check_can_send_permission!(topic,item)
-    unless @guardian.can_send_private_message?(item)
-      topic.errors.add(:archetype, :cant_send_pm)
-      @errors = topic.errors
-      raise ActiveRecord::Rollback.new
-    end
-  end
 end
-- 
1.8.3.4 (Apple Git-47)

